% Functions needed：
% Import image sequence:1.readTifSequence.m; 2.readMulTif.m; 
% Differential images：1.subBg.m; 2.adpmedian.m
% Import image mask or create mask: 1.showSlide.m
% Method 1: Amplitude spectrum of sampling area vs. bg area (using mask): 1.ROIMean.m

%% Import image sequence
%%%%% 选择并读取单个多张的图片序列 %%%%%
clear;clc
[file,path] = uigetfile('*.tif');   %默认当前文件夹打开文件选择对话框（只包含tif文件）
fileName = fullfile(path,file);    %图片序列的完整名称，包含路径
data = readTifSequence(fileName);  %读取单个的多张图片序列数据,[imNum,row,column]
info = imfinfo(fileName);   %返回图片序列的结构体
imNum = size(info,1);   %图片张数（构架数）
row = info(1).Height;   %第一张图片的高度（行数）
column = info(1).Width; %第一张图片的宽度（列数）
clear info; %删除有关图片序列文件的信息

%%%%% 选择并读取一个文件夹下的多张图片 %%%%%%
% [file,path] = uigetfile('*.tif'); %默认当前文件夹打开文件选择对话框（只包含tif文件）,主要是获取图片所在文件夹的路径
% myfolder = dir(fullfile(path,'*.tif'));  %查找图片所在文件夹下的tif内容
% data = readMulTif(myfolder);  %读取一个文件夹下多张图片

%% Differential images (subtract the first image and then wiener2 filtering)
%%%%% 图片序列以三维数组形式存在：filtData %%%%%
bgRange = 1; %选取需要差减的背景图片序列范围（多张比单选取第一张的效果好）
subData = subBg(data,bgRange);  %差减掉背景，data第一维是图片张数
subData(1,:,:) = subData(2,:,:);  %使差减掉的第一张图片不为0，便于后面计算处理
clear data; %清除原始图片序列数据，释放内存
% 对图片序列去噪
filtData = zeros(imNum,row,column);
for ii = 1:imNum
    temp = squeeze(subData(ii,:,:)); 
    temp = wiener2(temp,[5,5]); %维纳滤波(适合去除高斯噪声）
    temp = adpmedian(temp,7);  %自适应中值滤波
    filtData(ii,:,:) = temp;
end
clear subData;  %清除差减图片序列数据，释放内存

%%%%% 图片序列以元胞数组形式存在：image %%%%%
image = cell(imNum,1);  %构建图片序列的胞元数组
for ii = 1:imNum;
    image{ii} = squeeze(filtData(ii,:,:));
end

%% Import image mask or create mask
%%%%% 从文件中导入imagej中生成的mask %%%%%
% % 读取roiMask
% disp('Please choose a mask for sampling area')
% [file,path] = uigetfile('*.tif');   %默认当前文件夹打开文件选择对话框（只包含tif文件）
% fileName = fullfile(path,file);    %mask图片的完整名称，包含路径
% roiMask = logical(imread(fileName));  %读取单张mask图片数据并转为逻辑类型
% % 读取bgMask
% disp('Please choose a mask for bg area')
% [file,path] = uigetfile('*.tif');   %默认当前文件夹打开文件选择对话框（只包含tif文件）
% fileName = fullfile(path,file);    %mask图片的完整名称，包含路径
% bgMask = logical(imread(fileName));  %读取单张mask图片数据并转为逻辑类型

%%%%% 利用函数创建mask %%%%%
% 显示图像序列
showSlide(filtData)

% 显示有颗粒的图像并创建mask
n = 2180;   % 根据showSlide观察到的有纳米颗粒的图片序号
figure,subplot(3,1,1),imagesc(squeeze(filtData(n,:,:)))
impixelinfo
[roiMask,c1,r1] = roipoly();  %互动式选取颗粒部分的mask

% 根据impixelinfo的信息，估计背景mask的坐标
c2 = c1;   %横坐标
r2 = r1-35;  %纵坐标
bgMask = roipoly(row,column,c2,r2);
% bgMask = poly2mask(c2,r2,row,column);
subplot(3,1,2),imagesc(roiMask)
subplot(3,1,3),imagesc(bgMask)

%% Method 1:  Amplitude spectrum of sampling area vs. bg area (using mask)
% 求对应mask区域图片的平均强度
imageRoimean = zeros(imNum,1);
imageBgmean = zeros(imNum,1);
 for ii = 1:imNum; 
     imageRoimean(ii,1) = roiMean(image{ii}, roiMask);   %颗粒区域对应平均强度
     imageBgmean(ii,1) = roiMean(image{ii}, bgMask);    %背景区域对应平均强度
 end
 
 
 % 对随时间变化的图片平均强度求fft,绘制频谱图
Nfft = 2048; %指定图片平均强度的序列长度，2的幂
Fs = 100; %Sampling frequency
Fn = (0:Nfft-1)/Nfft*Fs; %frequency sequence
y1 = fft(imageRoimean,Nfft);
mag1 = abs(y1);
figure
plot(Fn(1:Nfft/2),mag1(1:Nfft/2)*2/Nfft);  %颗粒区域对应平均强度求频谱
xlabel('Frequency/Hz');ylabel('Amplitude');
title('所选roi区域平均强度频谱图');
hold on
y2 = fft(imageBgmean,Nfft);
mag2 = abs(y2);
plot(Fn(1:Nfft/2),mag2(1:Nfft/2)*2/Nfft);  %背景区域对应平均强度求频谱      
set(gca, 'linewidth', 1.5)
legend('ROI', 'Background')
hold off

%% Method 1:Phase spectrum of sampling area vs. bg area (using mask)
ph1 = 2*angle(y1(1:Nfft/2));  %利用angle函数求出每个点的角度
ph1 = ph1*180/pi;  %由弧度转化成角度
plot(Fn(1:Nfft/2),ph1(1:Nfft/2),'r');
xlabel('频率/hz'),ylabel('相角'),title('相位谱');
grid on
hold on
ph2 = 2*angle(y2(1:Nfft/2));  %利用angle函数求出每个点的角度
ph2 = ph2*180/pi;  %由弧度转化成角度
plot(Fn(1:Nfft/2),ph2(1:Nfft/2),'b');
hold off


%% Method 2: FFT analysis of multiple pixels
% 对三维图片序列数据沿着图片张数方向求fft
Nfft = 512; %指定图片的序列长度，2的幂
Fs = 106; %Sampling frequency
Fn = (0:Nfft-1)/Nfft*Fs; %frequency sequence
Y = fft(filtData,Nfft,1);  %沿着图片序列长度方向求fft
Mag = abs(Y);

%选取多个像素点的平均强度画频谱图
a = cell(Nfft,1); b1 = zeros(Nfft,1);
m = length(find(roiMask(:)~=0));  %非0像素个数
for ii = 1:Nfft
    a{ii} = (squeeze(Mag(ii,:,:))).*roiMask;  %选择矩形区域，前者是高，后者是宽
    b1(ii) = sum(a{ii}(:))./m;        %矩形区域的平均强度
end
figure
plot(Fn(1:Nfft/2),b1(1:Nfft/2)*2/Nfft);  %所选区域对应平均强度求频谱
xlabel('Frequency/Hz');ylabel('amplitude');
title('所选区域平均强度频谱图');